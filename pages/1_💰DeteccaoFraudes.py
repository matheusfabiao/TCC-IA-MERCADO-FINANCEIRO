# Ignorar avisos
import warnings
warnings.filterwarnings('ignore')

# Importando bibliotecas necess√°rias
import streamlit as st
from utils.ImportDeteccaoFraudes import *
from utils.Global import *

# C√≥digo de Detec√ß√£o de Fraudes em Transa√ß√µes de Cart√£o de Cr√©dito
# Autor: Matheus Fabi√£o da Costa Pereira
# Data de Cria√ß√£o: 30/10/2023

    
# CHAMADA DE FUN√á√ïES

st.set_page_config(
    page_title='Detec√ß√£o de Fraudes Banc√°rias',
    page_icon='üí∞'
)

# T√≠tulo
titulo_app()

# Programando a Barra Lateral de Navega√ß√£o da Aplica√ß√£o Web

add_logo()

# Cabe√ßalho lateral
st.sidebar.header('Dataset e Hiperpar√¢metros')
st.sidebar.markdown("""**Configure o Modelo de ML**""")

ajuda_config()

divisao = st.sidebar.select_slider('Escolha o Percentual de Divis√£o dos Dados em Treino e Teste (padr√£o = 80/20):', (0.5, 0.6, 0.65, 0.7, 0.75, 0.8, 0.9), 0.8)

Solver = st.sidebar.selectbox('Algoritmo (padr√£o = lbfgs)', ('lbfgs', 'newton-cg', 'liblinear', 'sag'))
Penality = st.sidebar.radio("Regulariza√ß√£o (padr√£o = l2):", ('none', 'l1', 'l2', 'elasticnet'), 2)
Tol = st.sidebar.selectbox('''Toler√¢ncia Para Crit√©rio de Parada                               
                                (padr√£o = 1e-4):''', ('1e-4', '1e-5', '1e-6'))
Max_Iteration = st.sidebar.select_slider("N√∫mero de Itera√ß√µes (padr√£o = 100):", (50, 100, 500, 700, 1000), 100)


# Dicion√°rio Para os Hiperpar√¢metros
# https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html
hiperparametros = { 'Penality':Penality, 'Tol':Tol, 'Max_Iteration':Max_Iteration, 'Solver':Solver }

# Exibir os √∫ltimos 5 dados do Dataset
base_dados = carrega_dataset()
# pre_processar_dados(base_dados)
exibe_dataset(base_dados)
info_dataset()

# PREPARA√á√ÉO DOS DADOS

base_dados = remove_tempo(base_dados)

st.subheader('Divis√£o dos Conjuntos de Dados')
# Separando as transa√ß√µes em fraude e n√£o fraude
nao_fraudes, fraudes = separa_fraudes(base_dados)
validacao, dados, validacao_real = amostra_validacao(nao_fraudes, fraudes, base_dados)

X_reamostrado, y_reamostrado = prepara_dados(base_dados)
x_treino, x_teste, y_treino, y_teste = separa_dados(X_reamostrado, y_reamostrado, divisao)

# Programando o Bot√£o de A√ß√£o
if(st.sidebar.button("Clique Para Treinar o Modelo de Logistic Regression")):
    
    # Barra de progress√£o
    with st.spinner('Separando os Dados...'):
        time.sleep(1)

    # Info de sucesso
    st.success("Dados de Treino e Teste Prontos!")
    
    # Cria o modelo
    st.subheader('Treinamento do Modelo')
    linear_regression = cria_modelo(hiperparametros)
    
    try:
        # Treina o modelo
        treina_modelo(linear_regression, x_treino, y_treino)
    
        # Barra de progress√£o
        barra_progressao = st.progress(0)
        
        # Mostra a barra de progress√£o com percentual de conclus√£o
        for porcentagem_completada in range(100):
            time.sleep(0.1)
            barra_progressao.progress(porcentagem_completada + 1)
            
        # Info para o usu√°rio
        with st.spinner('Treinando o Modelo...'):
            time.sleep(1)

        # Info de sucesso
        st.success("Modelo Treinado!")
    except Exception as e:
        st.error(f"Erro durante o treinamento do modelo: {str(e)}")
        
    try:    
        previsao = faz_previsao(linear_regression, x_teste)
    
        # Avalia√ß√£o do modelo
        st.subheader('Avalia√ß√£o do Modelo')
        precisao, recall, f1, acuracia, matriz_confusao = calcula_metricas(y_teste, previsao)
        exibe_metricas(precisao, recall, f1, acuracia, matriz_confusao)
    except Exception as e:
        st.error(f"Erro durante o c√°lculo de m√©tricas ou previs√µes: {str(e)}")
        
    # Teste com o modelo
    st.subheader('Valida√ß√£o do Modelo')
    predict = linear_regression.predict(validacao)
    dados = pd.DataFrame({'real':validacao_real, 'previsao':predict})
    st.dataframe(dados)